# bei users/ und bei auth/ gibt es mock user:
# (id, username, password, email, usertype)
# ("1234","testuser","safepassword","test[at]example.com",UserType.Admin));
# ("9632","userlein","securepassword","example[at]test.com",UserType.User));
# Nach Registrierung -> neue User auch über auth/ aufrufbar
# Profil Update: geht nur mit mock usern - id muss stimmen, username und password
# können geändert werden

### Get home
GET http://localhost:8080/

### Get users home
GET http://localhost:8080/users

### Get user profile
GET http://localhost:8080/users/9632/profile
Authorization: Bearer userlein-mrpToken

### Get user ratings
GET http://localhost:8080/users/9632/ratings
Authorization: Bearer userlein-mrpToken

### try auth
GET http://localhost:8080/auth

### Post auth register
POST http://localhost:8080/auth/register
Content-Type: application/json

{
    "username": "testuser1",
    "password1": "124",
    "password2": "124",
    "email": "example@test1.com",
    "userType": "User"
}

### Post auth login
POST http://localhost:8080/auth/login
Content-Type: application/json

{
    "username": "testuser1",
    "password": "124"
}

### Put users profile
PUT http://localhost:8080/users/9632/profile
Content-Type: application/json
Authorization: Bearer userlein-mrpToken

{
  "username": "userlein",
  "passwordOld": "securepassword",
  "passwordNew1": "127",
  "passwordNew2": "127"
}

### Delete user
DELETE http://localhost:8080/users/9632/delete
Authorization: Bearer userlein-mrpToken