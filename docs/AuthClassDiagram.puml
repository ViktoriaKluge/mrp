@startuml
' Detailed class diagram for the Auth flow
title Auth layer â€” classes and relationships

package "Controller" {
  class AuthController {
    +handle(Request) : Response
    -login(String body) : Response
    -createUser(String body) : Response
  }
}

package "Service" {
  class AuthService {
    +register(UserCreateDto) : User
    +createToken(UserLoginDto) : UserLoggedInDto
    -createToUser(UserCreateDto) : User
    -newToken(String) : UserLoggedInDto
  }
}

package "Repository" {
  interface AuthRepository {
    +save(User) : User
    +login(UserLoginDto) : UserLoginDto
    +findByUsername(String) : User
  }
  class MemoryAuthRepository {
    +save(User) : User
    +login(UserLoginDto) : UserLoginDto
    +findByUsername(String) : User
  }
}

package "Model / DTOs" {
  class User {
    -id : String
    -username : String
    -email : String
    -password : String
    -userType : String
  }
  class UserCreateDto {
    +getUsername()
    +getEmail()
    +getPassword1()
    +getUserType()
    +isUser()
  }
  class UserLoginDto {
    +getUsername()
    +getPassword()
    +bothHere()
  }
  class UserLoggedInDto {
    +getUsername()
    +getToken()
  }
}


' Relationships and cardinality/notes
AuthController ..> AuthService : uses
AuthService ..> AuthRepository : uses
AuthRepository <|.. MemoryAuthRepository

AuthController ..> UserLoginDto : builds from body
AuthController ..> UserCreateDto

AuthService --> User : creates (register)
AuthService --> UserLoggedInDto : returns token DTO

MemoryAuthRepository ..> User : stores multiple (in-memory list)

' Notes about behavior
note right of AuthService
  register():
  - validates dto.isUser()
  - constructs User, assigns UUID id
  - calls authRepository.save(user)
  - throws UnprocessableEntityException if save returns null
  createToken():
  - checks credentials via authRepository.login()
  - returns token formatted as username + "-mrpToken"
end note

@enduml